clone_depth: 5
version: "{branch}.{build}"

image:
  - Ubuntu
  - Visual Studio 2019

environment:
  matrix:
    - DOGE_ARCH: amd64
      DOGE_MINGW: 'C:\msys64\mingw64'
    - DOGE_ARCH: 386
      DOGE_MINGW: 'C:\msys64\mingw32'

install:
  - git submodule update --init --depth 1 --recursive
  - go version

for:
  # Linux has its own script without -arch and -cc.
  # The linux builder also runs lint.
  - matrix:
      only:
        - image: Ubuntu
    build_script:
      - go run build/ci.go lint
      - go run build/ci.go install -dlgo
    test_script:
      - go run build/ci.go test -dlgo -coverage

  # linux/386 is disabled.
  - matrix:
      exclude:
        - image: Ubuntu
          DOGE_ARCH: 386

  # Windows builds for amd64 + 386.
  - matrix:
      only:
        - image: Visual Studio 2019
    environment:
      # We use gcc from MSYS2 because it is the most recent compiler version available on
      # AppVeyor. Note: gcc.exe only works properly if the corresponding bin/ directory is
      # contained in PATH.
      DOGE_CC: '%DOGE_MINGW%\bin\gcc.exe'
      PATH: '%DOGE_MINGW%\bin;C:\Program Files (x86)\NSIS\;%PATH%'
    build_script:
      - 'echo %DOGE_ARCH%'
      - 'echo %DOGE_CC%'
      - '%DOGE_CC% --version'
      - go run build/ci.go install -dlgo -arch %DOGE_ARCH% -cc %DOGE_CC%
    after_build:
      # Upload builds. Note that ci.go makes this a no-op PR builds.
      - go run build/ci.go archive -arch %DOGE_ARCH% -type zip -signer WINDOWS_SIGNING_KEY -upload gdogestore/builds
      - go run build/ci.go nsis -arch %DOGE_ARCH% -signer WINDOWS_SIGNING_KEY -upload gdogestore/builds
    test_script:
      - go run build/ci.go test -dlgo -arch %DOGE_ARCH% -cc %DOGE_CC% -coverage
